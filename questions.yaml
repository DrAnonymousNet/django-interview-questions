# yaml-language-server: $schema=https://webscope-hiring.herokuapp.com/api/questions-schema/
questions:
- title: Can you please briefly explain Django's system architecture 
  type: full_text
  
- title: Which ones of the following commands will create files in your filesystem?
  type: multi_choice
  options:
  - value: ./manage.py makemigrations
    correct: true
  - value: ./manage.py migrate
  - value: ./manage.py sqlmigrate

- title: Can you please describe the pros & cons of Django's ORM?
  type: full_text

- title: Does Django support NoSQL? If so, how?
  type: full_text

- title: What is CRSF protection and how it's implemented in Django?
  type: full_text

- title: Which one of the following code snipets will trigger a post_save signal?
  type: multi_choice
  body: |
    - Code snippet no. 1
    ~~~python
    User.objects.filter(pk=10).update(name="John")
    ~~~
    - Code snippet no. 2
    ~~~python
    User.objects.get(pk=10).save(name="John")
    ~~~
  options:
  - value: Code snippet no. 1
  - value: Code snippet no. 2
  - value: Both
  - value: None

- title: What is the typical usage of Django's middleware?
  type: multi_choice
  options:
  - value: Cross-Site request forgery protection
    correct: true
  - value: Rendering a template
  - value: Session management
    correct: true
  - value: Authentication handling
    correct: true
  - value: Querying database

- title: What is the typical structure of Django's application?
  type: full_text

- title: Where does Django store information about SQL migrations?
  type: multi_choice
  options:
  - value: Filesystem
    correct: true
  - value: Database
    correct: true
  - value: Cache

- title: Why is it recommended to start a project with a custom user model?
  type: full_text

- title: What does the following code do?
  type: single_choice
  body: |
    ~~~python
    from django.db import models

    class OfficeBuildingsManager(models.Manager):
        def get_queryset(self):
            return super().get_queryset().filter(building_type='office')

    class Building(models.Model):
        offices = OfficeBuildingsManager()

    all_buildings = Building.objects.all()
    ~~~
  options:
    - value: Loads all buildings including offices to all_buildings variable
    - value: Throws `AttributeError` exception
      correct: true

- title: How to structure your Django app so that it is re-usable in other Django projects?
  type: full_text

- title: What is the possible exception that can be thrown by this code?
  body: |
    ~~~python
    Company.objects.order_by('created_at')[0:1].get()
    ~~~
  type: multi_choice
  options:
    - value: Company.DoesNotExist
      correct: true
    - value: IndexError
    - value: both of these exceptions
    - value: none of these exceptions

- title: How is Django's admin interface customizable?
  type: full_text

- title: What is a Meta class on Django's models and what do we use it for?
  type: full_text

- title: What is Django REST framework and how does it work?
  type: full_text